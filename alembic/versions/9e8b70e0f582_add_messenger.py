"""add messenger

Revision ID: 9e8b70e0f582
Revises: 8d9619e1b94c
Create Date: 2025-08-31 19:20:29.398720

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9e8b70e0f582'
down_revision: Union[str, Sequence[str], None] = '8d9619e1b94c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP TABLE IF EXISTS friends CASCADE')
    op.execute('DROP TABLE IF EXISTS follows CASCADE')
    op.execute('DROP TABLE IF EXISTS creator_post_interactions CASCADE')
    op.execute('DROP TABLE IF EXISTS chats CASCADE')
    op.execute('DROP TABLE IF EXISTS friend_requests CASCADE')
    op.execute('DROP TABLE IF EXISTS messages CASCADE')
    op.execute('DROP INDEX IF EXISTS ix_feed_preferences_user_cat_tag')
    op.execute('DROP TABLE IF EXISTS feed_preferences CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('feed_preferences',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('feed_preferences_category_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('feed_preferences_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'category_id', name=op.f('feed_preferences_pkey'))
    )
    op.create_index(op.f('ix_feed_preferences_user_cat_tag'), 'feed_preferences', ['user_id', 'category_id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('chat_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('((|F|Fr|br|RF|Rb|RB|rF|FR|rB|b|Br|fR|rf|Rf|BR|R|f|r|bR|rb|u|U|f', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('seen_at_user_a', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('seen_at_user_b', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], name=op.f('messages_chat_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('messages_sender_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey'))
    )
    op.create_table('friend_requests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('from_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('to_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['from_user_id'], ['users.id'], name=op.f('friend_requests_from_user_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_user_id'], ['users.id'], name=op.f('friend_requests_to_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('friend_requests_pkey')),
    sa.UniqueConstraint('from_user_id', 'to_user_id', name=op.f('friend_requests_from_user_id_to_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('chats',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_a_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_b_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('last_message_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_message_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_a_id'], ['users.id'], name=op.f('chats_user_a_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_b_id'], ['users.id'], name=op.f('chats_user_b_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('chats_pkey')),
    sa.UniqueConstraint('user_a_id', 'user_b_id', name=op.f('uq_chat_pair'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('creator_post_interactions',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('last_interacted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['creator_posts.id'], name=op.f('creator_post_interactions_post_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('creator_post_interactions_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'post_id', name=op.f('creator_post_interactions_pkey'))
    )
    op.create_table('friends',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('friend_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['friend_id'], ['users.id'], name=op.f('friends_friend_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('friends_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('friends_pkey')),
    sa.UniqueConstraint('user_id', 'friend_id', name=op.f('friends_user_id_friend_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('follows',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('follower_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('following_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], name=op.f('follows_follower_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['following_id'], ['users.id'], name=op.f('follows_following_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('follows_pkey')),
    sa.UniqueConstraint('follower_id', 'following_id', name=op.f('follows_follower_id_following_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
