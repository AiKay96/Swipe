"""Add creator side

Revision ID: 2f7c6e18e182
Revises: 503a632bd0e6
Create Date: 2025-07-27 15:24:48.498168

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2f7c6e18e182'
down_revision: Union[str, Sequence[str], None] = '503a632bd0e6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('hashtags',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('category_tags',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('references',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('creator_posts',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('category_id', sa.Uuid(), nullable=True),
    sa.Column('reference_id', sa.Uuid(), nullable=True),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('category_tag_names', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('hashtag_names', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('like_count', sa.Integer(), nullable=False),
    sa.Column('dislike_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['reference_id'], ['references.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('perosnal_post_comments',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['personal_posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('perosnal_post_media',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('media_type', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['personal_posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('personal_post_likes',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('is_dislike', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['personal_posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reference_category_tags',
    sa.Column('reference_id', sa.Uuid(), nullable=False),
    sa.Column('tag_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['reference_id'], ['references.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['category_tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('reference_id', 'tag_id')
    )
    op.create_table('creator_post_category_tags',
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('tag_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['creator_posts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['category_tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('post_id', 'tag_id')
    )
    op.create_table('creator_post_comments',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['creator_posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('creator_post_hashtags',
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('tag_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['creator_posts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['hashtags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('post_id', 'tag_id')
    )
    op.create_table('creator_post_likes',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('is_dislike', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['creator_posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('creator_post_media',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('media_type', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['creator_posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('creator_post_saves',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('post_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('saved_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['creator_posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("DROP TABLE IF EXISTS creator_post_likes CASCADE;")
    op.execute("DROP TABLE IF EXISTS creator_post_media CASCADE;")
    op.execute("DROP TABLE IF EXISTS creator_post_comments CASCADE;")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # Re-create the legacy personal tables that were dropped in upgrade()
    op.create_table('post_media',
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('media_type', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['post_id'], ['personal_posts.id'], name=op.f('post_media_post_id_fkey')),
        sa.PrimaryKeyConstraint('id', name=op.f('post_media_pkey'))
    )
    op.create_table('post_comments',
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['post_id'], ['personal_posts.id'], name=op.f('post_comments_post_id_fkey')),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('post_comments_user_id_fkey')),
        sa.PrimaryKeyConstraint('id', name=op.f('post_comments_pkey'))
    )
    op.create_table('post_likes',
        sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('post_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
        sa.Column('is_dislike', sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['post_id'], ['personal_posts.id'], name=op.f('post_likes_post_id_fkey')),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('post_likes_user_id_fkey')),
        sa.PrimaryKeyConstraint('id', name=op.f('post_likes_pkey'))
    )

    op.execute('DROP TABLE IF EXISTS creator_post_interactions CASCADE;')
    op.execute('DROP TABLE IF EXISTS feed_preferences CASCADE;')

    op.execute('DROP TABLE IF EXISTS creator_post_saves CASCADE;')
    op.execute('DROP TABLE IF EXISTS creator_post_media CASCADE;')
    op.execute('DROP TABLE IF EXISTS creator_post_likes CASCADE;')
    op.execute('DROP TABLE IF EXISTS creator_post_hashtags CASCADE;')
    op.execute('DROP TABLE IF EXISTS creator_post_comments CASCADE;')
    op.execute('DROP TABLE IF EXISTS creator_post_category_tags CASCADE;')
    op.execute('DROP TABLE IF EXISTS reference_category_tags CASCADE;')
    op.execute('DROP TABLE IF EXISTS personal_post_likes CASCADE;')
    op.execute('DROP TABLE IF EXISTS perosnal_post_media CASCADE;')
    op.execute('DROP TABLE IF EXISTS perosnal_post_comments CASCADE;')

    op.execute('DROP TABLE IF EXISTS creator_posts CASCADE;')

    op.execute('DROP TABLE IF EXISTS "references" CASCADE;')
    op.execute('DROP TABLE IF EXISTS category_tags CASCADE;')
    op.execute('DROP TABLE IF EXISTS hashtags CASCADE;')
    op.execute('DROP TABLE IF EXISTS categories CASCADE;')

    op.execute('DROP TABLE IF EXISTS messages CASCADE;')
    op.execute('DROP TABLE IF EXISTS chats CASCADE;')
    op.execute('DROP TABLE IF EXISTS follows CASCADE;')
    op.execute('DROP TABLE IF EXISTS friend_requests CASCADE;')
    op.execute('DROP TABLE IF EXISTS friends CASCADE;')
    # ### end Alembic commands ###
